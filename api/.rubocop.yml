AllCops:
  TargetRubyVersion: 2.7
  Exclude:
    - 'bin/**/*'
    - 'tmp/**/*'
    - 'log/**/*'
    - 'coverage/**/*'
    - 'db/schema.rb'

require:
  - 'rubocop-rails'
  - 'rubocop-rspec'
  - 'rubocop-performance'

## メトリクス系
Metrics/AbcSize:
  # 下手に守ろうとするとコードが激しく断片化するので無効
  Enabled: false
Metrics/CyclomaticComplexity:
  # Max: 10 # default: 6
  Exclude:
    - 'app/graphql/acl.rb'
    - 'app/models/concerns/readable.rb'
Metrics/PerceivedComplexity:
  Exclude:
    - 'app/graphql/acl.rb'
    - 'app/models/concerns/readable.rb'

## 長さ系
Metrics/ClassLength:
  Max: 200
Metrics/MethodLength:
  Max: 20
  Exclude:
    - 'app/graphql/acl.rb'
    - 'app/models/concerns/readable.rb'
    - 'db/seeds/*.rb'
Metrics/BlockLength:
  Max: 20
  Exclude:
    - 'app/graphql/acl.rb'
    - 'app/models/concerns/readable.rb'
    - 'spec/**/*_spec.rb'
    - 'spec/factories/*.rb'
Layout/LineLength:
  # 基本的に長い行の折返しはエディターで対処
  Enabled: false
Metrics/ParameterLists:
  Enabled: false

Style/FrozenStringLiteralComment:
  Exclude:
    - 'db/migrate/*.rb'

Style/AsciiComments:
  # 日本語コメントを許可
  Enabled: false

## インデント系
Layout/MultilineMethodCallIndentation:
  Enabled: true
  EnforcedStyle: 'indented'

## スペース系
Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: false
# CaseIndentation:
#   IndentOneStep: false
#   EnforcedStyle: 'case'
# Layout/BlockAlignment:
#   EnforcedStyleAlignWith: 'start_of_block'

## 名前付け系
Naming/HeredocDelimiterNaming:
  Enabled: false

## rspec系
RSpec/HookArgument:
  Enabled: true
  EnforcedStyle: 'each'

RSpec/MultipleExpectations:
  # 1つのit内に複数のexpectを許可する
  Enabled: false
RSpec/ExampleLength:
  Max: 20

## rails系
Rails/Output:
  Exclude:
    - 'db/seeds/*.rb'

## misc
Bundler/OrderedGems:
  Enabled: false
Style/Documentation:
  Enabled: false
Style/BlockDelimiters:
  Enabled: true
  EnforcedStyle: 'braces_for_chaining'
Style/FormatString:
  Enabled: true
  EnforcedStyle: 'percent'
Style/GuardClause:
  # 過激
  Enabled: false
Style/IfUnlessModifier:
  # 過激
  Enabled: false
Style/RedundantSelf:
  # selfを明示したいときもある
  # ただし、selfではプライベートメソッドを呼べないので少し紛らわしくなる
  Enabled: false
# Style/RedundantReturn:
#   Enabled: false
Style/EmptyElse:
  Enabled: true
  # elseが空のときのみ警告(nilを明示して欲しい)
  EnforcedStyle: 'empty'
Style/MissingElse:
  Enabled: true
  EnforcedStyle: 'case'
Style/TernaryParentheses:
  Enabled: true
  # 多少複雑な条件演算子は括弧で囲む
  EnforcedStyle: 'require_parentheses_when_complex'
