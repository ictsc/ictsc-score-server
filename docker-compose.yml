version: '3'

services:
  proxy:
    image: nginx:1.19.6
    ports: ['127.0.0.1:8900:8900']
    links:
      - api
      - ui
      - push
    volumes:
      - './proxy/nginx.conf:/etc/nginx/nginx.conf:ro'

  api:
    image: upluse10/ictsc-score-server:api
    env_file: .env
    build:
      context: api/
    depends_on:
      - db
      - redis
    stdin_open: true
    tty: true
    volumes:
      - './api:/usr/src/app'
    command: |
      sh -ec '
        if [ -f "./tmp/pids/server.pid" ]; then
          rm ./tmp/pids/server.pid
        fi

        dockerize -wait tcp://redis:6379 -timeout 100s
        dockerize -wait tcp://db:5432 -timeout 100s

        sleep 2 # dockerizeをパスした直後でもアクセスできないことがある
        rails db:prepare

        rails server -b 0.0.0.0
      '

  ui:
    image: upluse10/ictsc-score-server:ui
    env_file: .env
    build:
      context: ui/
    stdin_open: true
    tty: true
    volumes:
      - './ui:/usr/src/app'
    command: yarn run dev

  db:
    image: postgres:11.3-alpine
    env_file: .env
    stdin_open: true
    tty: true
    command: ['postgres']
    # command: ['postgres', '-c', 'max_connections=$POSTGRES_MAX_CONNECTIONS', '-c', 'shared_buffers=$POSTGRES_SHARED_BUFFERS', '-c', 'work_mem=$POSTGRES_WORK_MEM']

  redis:
    image: redis:5.0.4-alpine
    env_file: .env

  yamllint:
    image: upluse10/ictsc-score-server:yamllint
    build:
      context: yamllint/
    volumes:
      - './:/usr/src/app'
    command: yamllint -c /usr/src/app/.yamllint /usr/src/app

  push:
    image: openfresh/plasma:0.2.2
    env_file: .env
    depends_on:
      - redis
